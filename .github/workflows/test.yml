name: Test Suite

on:
  push:
    branches: [ master, main, develop, feature/*, fix/* ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: quiniela_user
          POSTGRES_PASSWORD: quiniela_password
          POSTGRES_DB: quiniela_predictor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-html pytest-cov pytest-mock pytest-benchmark
    
    - name: Set up test environment variables
      run: |
        echo "DATABASE_URL=postgresql://quiniela_user:quiniela_password@localhost:5432/quiniela_predictor_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "API_FOOTBALL_KEY=test_key_for_ci" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci_testing_32_chars" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
    
    - name: Wait for services
      run: |
        timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U quiniela_user; do sleep 1; done'
        timeout 30s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
    
    - name: Setup test database
      run: |
        PGPASSWORD=quiniela_password psql -h localhost -U quiniela_user -d quiniela_predictor_test -c "SELECT 1;"
    
    - name: Run linting
      run: |
        flake8 backend/app tests/ --max-line-length=120 --ignore=E203,W503 --exclude=migrations
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short -m unit --junitxml=junit-unit.xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short -m integration --junitxml=junit-integration.xml
      env:
        DATABASE_URL: postgresql://quiniela_user:quiniela_password@localhost:5432/quiniela_predictor_test
    
    - name: Run critical tests
      run: |
        pytest -v --tb=short -m critical --junitxml=junit-critical.xml
      env:
        DATABASE_URL: postgresql://quiniela_user:quiniela_password@localhost:5432/quiniela_predictor_test
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=backend/app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=70 --junitxml=junit-coverage.xml
      env:
        DATABASE_URL: postgresql://quiniela_user:quiniela_password@localhost:5432/quiniela_predictor_test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit-*.xml
          htmlcov/
          coverage.xml
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
    
    - name: Comment test results on PR
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results - Python ${{ matrix.python-version }}
        path: junit-*.xml
        reporter: java-junit

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r backend/app -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: quiniela_user
          POSTGRES_PASSWORD: quiniela_password
          POSTGRES_DB: quiniela_predictor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/ -m slow --benchmark-json=benchmark.json
      env:
        DATABASE_URL: postgresql://quiniela_user:quiniela_password@localhost:5432/quiniela_predictor_test
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "✅ All tests passed! Ready for deployment."
    
    - name: Notify on failure
      if: needs.test.result == 'failure'
      run: |
        echo "❌ Tests failed! Check the logs for details."
        exit 1